!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rangol/work/Practice_C_CPP/Mylib_C_Cpp/matrix/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20230122.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
MADD	./src/matrix.h	/^#define MADD(/;"	d
MAT_MULTABLE	./src/matrix.h	/^#define MAT_MULTABLE(/;"	d
MAT_SIZE_EQUAL	./src/matrix.h	/^#define MAT_SIZE_EQUAL(/;"	d
MAT_TEST	./src/matrix.h	/^#define MAT_TEST(/;"	d
Matrix	./src/matrix.h	/^typedef struct Matrix{$/;"	s
Matrix	./src/matrix.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
_MATRIX_H	./src/matrix.h	/^#define _MATRIX_H$/;"	d
addMat	./src/matrix.c	/^bool addMat(const Matrix *m1, const Matrix *m2, Matrix *out){$/;"	f	typeref:typename:bool
col	./src/matrix.h	/^	size_t col;$/;"	m	struct:Matrix	typeref:typename:size_t
copyMat	./src/matrix.c	/^bool copyMat(Matrix *m1, Matrix *m2){$/;"	f	typeref:typename:bool
createMat	./src/matrix.c	/^Matrix * createMat(size_t row, size_t col){$/;"	f	typeref:typename:Matrix *
data	./src/matrix.h	/^	float *data;$/;"	m	struct:Matrix	typeref:typename:float *
delMat	./src/matrix.c	/^bool delMat(Matrix *p)$/;"	f	typeref:typename:bool
initMat	./src/matrix.c	/^bool initMat(Matrix *m1, size_t arrLen, const float *arr){$/;"	f	typeref:typename:bool
main	./src/main.c	/^int main(int argc, char* argv[]){$/;"	f	typeref:typename:int
mulMat	./src/matrix.c	/^bool mulMat(const Matrix *m1, const Matrix *m2, Matrix *out){$/;"	f	typeref:typename:bool
printMat	./src/matrix.c	/^bool printMat( const Matrix *p )$/;"	f	typeref:typename:bool
row	./src/matrix.h	/^	size_t row;$/;"	m	struct:Matrix	typeref:typename:size_t
